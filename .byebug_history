n
sc
s
@display.notifications
s
@notifications
c
q
self.dup
self.rows[1]
self
piece.board.rows[1]
c
piece.board.rows[1]
piece.board
c
piece.board.rows[6]
piece.board
c
duped_board.rows[1]
duped_board
duped_board.in_check?(color)
piece.board[[1, 6]]
piece.pos
piece
c
piece.board
board
piece.board[[0, 4]]
piece.pos
piece.board[[1, 4]]
piece.board[[1, 3]]
piece.board[[1, 4]]
piece.board[[1, 4]
piece.board
piece.pos
piece.moves
piece.color
s
color
s
n
display piece
n
s
duped_board.in_check?(:black)
color
c
duped_board[[1, 4]]
duped_board
duped_board.in_check?(:black)
duped_board
c
duped_board[[3, 4]]
duped_board
color
c
duped_board.rows.each {|row| p row}
duped_board
c
n
duped_board
color
q
self.pos
self
c
display @pos
@color
@pos
c
@board.in_check?(@current_player)
@current_player
current_player
c
display pos
c
display @board[pos]
c
n
piece
n
pieces
n
s
color
s
pos
s
n
piece
n
@board[pos].color
pos
n
pos
n
@board[pos].color
@board[pos]
pos
s
attack_dirs
s
@board
c
quit
attack_moves
c
self
@pos
s
move_dirs
c
move_dirs
c
@pos
c
display @pos
c
board[@pos]
@pos
c
@pos
board.rows[7]
board
board.empty?(pos)
pos
s
c
s
c
move_dirs
s
display [dx, dy]
dy
dx
c
s
c
dy
dx
dx, dy
n
s
display @pos
diplay @pos
display pos
s
display moves
@pos
c
move_dirs
c
s
moves
n
s
display pos
display moves
s
pos
s
@pos
pos
s
dy
dt
dx
s
dy
dx
self.move_dirs
s
moves
c
quit
@display.get_input
@display
c
s
pos
s
to_pos
from_pos
x
q
s
display @rows
s
@rows
q
@rows
quit
@rows
c
@rows
@board
display piece
display pos
continue
fd
d
s
ssssccc
s
read_char
s
display to_pos
display from_pos
c
q
c
s
c
s
c
@cursor_pos
c
s
bg
s
bg
s
[i, j]
s
@cursor_pos
c
@cursor_pos[0]
@cursor_pos
diff
